import { NextResponse } from "next/server";
import { supabaseAdmin } from '../../../lib/supabaseAdmin'
export async function POST(req:Request){ try{ const body=await req.json(); const {company_name,taken_by,end_customer_name,contact_email,image_url,items}=body; if(!items||!Array.isArray(items)||items.length===0){ return NextResponse.json({error:"En az bir ürün kalemi gerekli."},{status:400}); } const ids=[...new Set(items.map((i:any)=>i.product_id))]; const {data:prodData,error:prodErr}=await supabaseAdmin.from("products").select("id,price,name").in("id",ids); if(prodErr) return NextResponse.json({error:prodErr.message},{status:500}); const priceMap=new Map<number, {price:number,name:string}>(); prodData?.forEach((p:any)=>priceMap.set(p.id,{price:Number(p.price),name:p.name})); let total=0; const orderItems=items.map((i:any)=>{ const p=priceMap.get(i.product_id); if(!p) throw new Error("Ürün bulunamadı: "+i.product_id); const unit=p.price; const line=unit*Number(i.quantity); total+=line; return {product_id:i.product_id,quantity:i.quantity,color:i.color||null,note:i.note||null,unit_price:unit}; }); const total_excl=Number(total.toFixed(2)); const total_incl=Number((total*1.10).toFixed(2)); const {data:order,error:orderErr}=await supabaseAdmin.from("orders").insert({company_name,taken_by,end_customer_name,contact_email,image_url,total_excl_vat:total_excl,total_incl_vat:total_incl}).select("id").single(); if(orderErr) return NextResponse.json({error:orderErr.message},{status:500}); const withOrderId=orderItems.map((oi:any)=>({...oi,order_id:order.id})); const {error:itemsErr}=await supabaseAdmin.from("order_items").insert(withOrderId); if(itemsErr) return NextResponse.json({error:itemsErr.message},{status:500}); return NextResponse.json({ok:true,order_id:order.id,total_excl:total_excl,total_incl:total_incl}); }catch(e:any){ return NextResponse.json({error:e.message||"Beklenmeyen hata"},{status:500}); }}
